name: Build, Test, and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: false
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 2

      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Clean up Docker system
        run: |
          docker-compose down -v
          docker system prune -a -f

      - name: Setup Git
        run: |
          git config --global url."https://${{ secrets.GH_PAT }}@github.com/".insteadOf "git@github.com:"

      - name: Update submodules
        run: |
          git submodule sync
          git submodule update --init --recursive

      - name: Start MySQL Container
        if: env.SKIP_API_TESTS == 'false'
        run: |
          docker run -d --name mysql-container -e MYSQL_ROOT_PASSWORD=${{ secrets.CI_MYSQL_ROOT_PASSWORD }} -e MYSQL_DATABASE=${{ secrets.CI_MYSQL_DATABASE }} -e MYSQL_USER=${{ secrets.CI_MYSQL_USER }} -e MYSQL_PASSWORD=${{ secrets.CI_MYSQL_PASSWORD }} -p 3306:3306 mysql:8.0

      - name: Configure MySQL
        if: env.SKIP_API_TESTS == 'false'
        run: |
          sudo systemctl start mysql --no-pager

          until sudo mysqladmin ping -h localhost --silent; do
              echo "Waiting for MySQL to start..."
              sleep 5
          done

          sudo mysql -u root -p"${{ secrets.CI_MYSQL_ROOT_PASSWORD }}" -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '${{ secrets.CI_MYSQL_ROOT_PASSWORD }}';"
          sudo mysql -u root -p"${{ secrets.CI_MYSQL_ROOT_PASSWORD }}" -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.CI_MYSQL_DATABASE }};"
          sudo mysql -u root -p"${{ secrets.CI_MYSQL_ROOT_PASSWORD }}" -e "CREATE USER IF NOT EXISTS '${{ secrets.CI_MYSQL_USER }}'@'localhost' IDENTIFIED BY '${{ secrets.CI_MYSQL_PASSWORD }}';"
          sudo mysql -u root -p"${{ secrets.CI_MYSQL_ROOT_PASSWORD }}" -e "GRANT ALL PRIVILEGES ON ${{ secrets.CI_MYSQL_DATABASE }}.* TO '${{ secrets.CI_MYSQL_USER }}'@'localhost';"
          sudo mysql -u root -p"${{ secrets.CI_MYSQL_ROOT_PASSWORD }}" -e "FLUSH PRIVILEGES;"

      - name: Check MySQL Logs
        if: env.SKIP_API_TESTS == 'false'
        run: |
          sudo journalctl -u mysql.service --since today

      - name: Check MySQL Service
        if: env.SKIP_API_TESTS == 'false'
        run: |
          sudo systemctl status mysql --no-pager
          mysql --version
          sudo mysql -u root -p"${{ secrets.CI_MYSQL_ROOT_PASSWORD }}" -e "SHOW DATABASES;"
          sudo mysql -u ${{ secrets.CI_MYSQL_USER }} -p"${{ secrets.CI_MYSQL_PASSWORD }}" -e "SHOW DATABASES;"

      - name: Validate MySQL Permissions
        if: env.SKIP_API_TESTS == 'false'
        run: |
          sudo mysql -u root -p"${{ secrets.CI_MYSQL_ROOT_PASSWORD }}" -e "SHOW GRANTS FOR 'root'@'localhost';"

      - name: Cache Composer packages
        uses: actions/cache@v3
        if: env.SKIP_API_TESTS == 'false'
        with:
          path: ${{ github.workspace }}/api/src/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('api/src/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer Dependencies
        if: env.SKIP_API_TESTS == 'false'
        run: |
          cd api/src
          composer install --no-interaction --prefer-dist

      - name: Create and Debug .env file
        if: env.SKIP_API_TESTS == 'false'
        run: |
          cd api/src
          cp .env.example .env
          sed -i "s#DB_HOST=.*#DB_HOST=127.0.0.1#" .env
          sed -i "s#DB_DATABASE=.*#DB_DATABASE=${{ secrets.CI_MYSQL_DATABASE }}#" .env
          sed -i "s#DB_USERNAME=.*#DB_USERNAME=${{ secrets.CI_MYSQL_USER }}#" .env
          sed -i "s#DB_PASSWORD=.*#DB_PASSWORD=${{ secrets.CI_MYSQL_PASSWORD }}#" .env
          sed -i "s#PUSHER_APP_ID=.*#PUSHER_APP_ID=null#" .env
          sed -i "s#PUSHER_APP_KEY=.*#PUSHER_APP_KEY=null#" .env
          sed -i "s#PUSHER_APP_SECRET=.*#PUSHER_APP_SECRET=null#" .env
          sed -i "s#PUSHER_APP_CLUSTER=.*#PUSHER_APP_CLUSTER=null#" .env
          sed -i "s#BROADCAST_DRIVER=.*#BROADCAST_DRIVER=log#" .env
          sed -i "s#LARAVEL_WEBSOCKETS_ENABLED=.*#LARAVEL_WEBSOCKETS_ENABLED=false#" .env
          php artisan key:generate
          php artisan jwt:secret
          echo "Contents of .env file:"
          cat .env

      - name: Clear Config Cache
        if: env.SKIP_API_TESTS == 'false'
        run: |
          cd api/src
          php artisan config:clear
          php artisan cache:clear

      - name: Debug Database Connection
        if: env.SKIP_API_TESTS == 'false'
        run: |
          cd api/src
          echo "Environment variables:"
          echo "CI_MYSQL_DATABASE: ${{ secrets.CI_MYSQL_DATABASE }}"
          echo "CI_MYSQL_USER: ${{ secrets.CI_MYSQL_USER }}"
          echo "CI_MYSQL_PASSWORD: ${{ secrets.CI_MYSQL_PASSWORD }}"
          echo "MySQL Version:"
          mysql -h127.0.0.1 -u"${{ secrets.CI_MYSQL_USER }}" -p"${{ secrets.CI_MYSQL_PASSWORD }}" -e "SELECT VERSION();" || echo "Failed to connect with user"
          echo "MySQL Users:"
          sudo mysql -u root -p"${{ secrets.CI_MYSQL_ROOT_PASSWORD }}" -e "SELECT user, host FROM mysql.user;"
          echo "Database connection details:"
          php artisan tinker --execute="print_r(config('database.connections.mysql'));"
          echo "Attempting connection:"
          php artisan tinker --execute="try { DB::connection()->getPdo(); echo 'Connection successful!'; } catch (\Exception \$e) { echo 'Connection failed: ' . \$e->getMessage(); }"

      - name: Run database migrations and seed
        if: env.SKIP_API_TESTS == 'false'
        run: |
          cd api/src
          php artisan migrate --force --seed

      - name: Run Laravel tests
        if: env.SKIP_API_TESTS == 'false'
        run: |
          cd api/src
          php artisan test

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.17.0"

      - name: Cache Node.js modules
        uses: actions/cache@v3
        if: env.SKIP_FRONTEND_TESTS == 'false'
        with:
          path: ${{ github.workspace }}/front/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('front/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install Node.js dependencies
        if: env.SKIP_FRONTEND_TESTS == 'false'
        working-directory: front
        run: npm install

      - name: Run frontend tests
        if: env.SKIP_FRONTEND_TESTS == 'false'
        working-directory: front
        run: npm test

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          mention: here
          if_mention: failure,cancelled
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
