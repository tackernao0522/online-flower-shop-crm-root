version: 2.1

orbs:
  node: circleci/node@5.0.2

jobs:
  build:
    machine:
      image: ubuntu-2204:current

    steps:
      - checkout:
          submodules: false

      - add_ssh_keys:
          fingerprints:
            - "${CI_SSH_FINGERPRINT_ROOT}"
            - "${CI_SSH_FINGERPRINT_API}"
            - "${CI_SSH_FINGERPRINT_FRONT}"

      - run:
          name: Configure SSH for GitHub
          command: |
            mkdir -p ~/.ssh
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            chmod 600 ~/.ssh/config

      - run:
          name: Debug SSH keys
          command: |
            ssh-add -l
            ls -la ~/.ssh

      - run:
          name: Checkout Submodules with SSH
          command: |
            git submodule sync
            git submodule update --init --recursive --depth 1

      - run:
          name: Install Required Packages
          command: |
            sudo apt-get update
            sudo apt-get install -y sqlite3 libsqlite3-dev mysql-server mysql-client php-cli php-mbstring php-xml php-curl php-dom php-mysql curl

      - run:
          name: Install Composer
          command: |
            curl -sS https://getcomposer.org/installer | php
            sudo mv composer.phar /usr/local/bin/composer

      - run:
          name: Debug Environment Variables
          command: |
            echo "CI_MYSQL_DATABASE: ${CI_MYSQL_DATABASE}"
            echo "CI_MYSQL_USER: ${CI_MYSQL_USER}"
            echo "CI_MYSQL_PASSWORD: ${CI_MYSQL_PASSWORD}"
            echo "CI_MYSQL_ROOT_PASSWORD: ${CI_MYSQL_ROOT_PASSWORD}"

      - run:
          name: Configure MySQL
          command: |
            sudo systemctl start mysql
            sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '${CI_MYSQL_ROOT_PASSWORD}';"
            sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "CREATE DATABASE IF NOT EXISTS ${CI_MYSQL_DATABASE};"
            sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "CREATE USER IF NOT EXISTS '${CI_MYSQL_USER}'@'localhost' IDENTIFIED BY '${CI_MYSQL_PASSWORD}';"
            sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "GRANT ALL PRIVILEGES ON ${CI_MYSQL_DATABASE}.* TO '${CI_MYSQL_USER}'@'localhost';"
            sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "FLUSH PRIVILEGES;"

      - run:
          name: Check MySQL Service
          command: |
            sudo systemctl status mysql --no-pager
            mysql --version
            sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "SHOW DATABASES;"
            sudo mysql -u ${CI_MYSQL_USER} -p"${CI_MYSQL_PASSWORD}" -e "SHOW DATABASES;"
          no_output_timeout: 1m

      - run:
          name: Restart MySQL Service if Needed
          command: |
            if ! sudo systemctl is-active --quiet mysql; then
              sudo systemctl restart mysql
            fi

      - restore_cache:
          keys:
            - composer-v1-{{ checksum "~/project/api/src/composer.lock" }}
            - composer-v1-

      - run:
          name: Install Composer Dependencies
          command: |
            cd ~/project/api/src
            composer install --no-interaction --prefer-dist
            composer require doctrine/dbal

      - save_cache:
          key: composer-v1-{{ checksum "~/project/api/src/composer.lock" }}
          paths:
            - ~/project/api/src/vendor

      - run:
          name: Create and Debug .env file
          command: |
            cd ~/project/api/src
            cp .env.example .env
            sed -i "s#DB_CONNECTION=.*#DB_CONNECTION=sqlite#" .env  # SQLiteを使用するよう設定
            sed -i "s#DB_DATABASE=.*#DB_DATABASE=/tmp/database.sqlite#" .env  # SQLiteのパスを指定
            php artisan key:generate
            php artisan jwt:secret
            echo "Contents of .env file:"
            cat .env

      - run:
          name: Clear Config Cache
          command: |
            cd ~/project/api/src
            php artisan config:clear
            php artisan cache:clear

      - run:
          name: Debug Database Connection
          command: |
            cd ~/project/api/src
            echo "Environment variables:"
            echo "CI_MYSQL_DATABASE: ${CI_MYSQL_DATABASE}"
            echo "CI_MYSQL_USER: ${CI_MYSQL_USER}"
            echo "CI_MYSQL_PASSWORD: ${CI_MYSQL_PASSWORD}"
            echo "MySQL Version:"
            mysql -h127.0.0.1 -u"${CI_MYSQL_USER}" -p"${CI_MYSQL_PASSWORD}" -e "SELECT VERSION();" || echo "Failed to connect with user"
            echo "MySQL Users:"
            sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "SELECT user, host FROM mysql.user;"
            echo "Database connection details:"
            php artisan tinker --execute="print_r(config('database.connections.mysql'));"
            echo "Attempting connection:"
            php artisan tinker --execute="try { DB::connection()->getPdo(); echo 'Connection successful!'; } catch (\Exception \$e) { echo 'Connection failed: ' . \$e->getMessage(); }"

      - run:
          name: Run database migrations and seed
          command: |
            cd ~/project/api/src
            php artisan migrate --force --seed

      - run:
          name: Run Laravel tests
          command: |
            cd ~/project/api/src
            php artisan test --env=testing  # テスト環境を指定して実行

      - node/install:
          node-version: "18.17.0"

      - restore_cache:
          keys:
            - node-v1-{{ checksum "~/project/front/package-lock.json" }}
            - node-v1-

      - run:
          name: Install Node.js dependencies
          working_directory: ~/project/front
          command: npm install

      - save_cache:
          key: node-v1-{{ checksum "~/project/front/package-lock.json" }}
          paths:
            - ~/project/front/node_modules

      - run:
          name: Run frontend tests
          working_directory: ~/project/front
          command: npm test

workflows:
  version: 2
  build_and_test:
    jobs:
      - build:
          context: my-context
