version: 2.1

orbs:
  node: circleci/node@5.0.2
  aws-cli: circleci/aws-cli@2.0.3
  slack: circleci/slack@4.1.0

jobs:
  build:
    machine:
      image: ubuntu-2204:current

    steps:
      - checkout:
          submodules: false

      - add_ssh_keys:
          fingerprints:
            - "${CI_SSH_FINGERPRINT_ROOT}"
            - "${CI_SSH_FINGERPRINT_API}"
            - "${CI_SSH_FINGERPRINT_FRONT}"

      - run:
          name: Configure SSH for GitHub
          command: |
            mkdir -p ~/.ssh
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            chmod 600 ~/.ssh/config

      - run:
          name: Debug SSH keys
          command: |
            ssh-add -l
            ls -la ~/.ssh

      - run:
          name: Checkout Submodules with SSH
          command: |
            if ! git submodule sync || ! git submodule update --init --recursive --depth 1; then
              echo "Failed to checkout submodules"
              exit 1
            fi

      - run:
          name: Check for API changes
          command: |
            if [ -z "$(git diff --quiet HEAD^ HEAD -- api || echo 'changed')" ]; then
              echo "No changes in API. Skipping API tests."
              echo "export SKIP_API_TESTS=true" >> $BASH_ENV
            else
              echo "Changes detected in API. Will run API tests."
              echo "export SKIP_API_TESTS=false" >> $BASH_ENV
            fi

      - run:
          name: Check for Frontend changes
          command: |
            if [ -z "$(git diff --quiet HEAD^ HEAD -- front || echo 'changed')" ]; then
              echo "No changes in Frontend. Skipping Frontend tests."
              echo "export SKIP_FRONTEND_TESTS=true" >> $BASH_ENV
            else
              echo "Changes detected in Frontend. Will run Frontend tests."
              echo "export SKIP_FRONTEND_TESTS=false" >> $BASH_ENV
            fi

      - run:
          name: Install Required Packages
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              if ! sudo apt-get update || ! sudo apt-get install -y mysql-server mysql-client php-cli php-mbstring php-xml php-curl php-dom php-mysql curl; then
                echo "Failed to install required packages"
                exit 1
              fi
            fi

      - run:
          name: Install Composer
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              if ! curl -sS https://getcomposer.org/installer | php || ! sudo mv composer.phar /usr/local/bin/composer; then
                echo "Failed to install Composer"
                exit 1
              fi
            fi

      - run:
          name: Debug Environment Variables
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              echo "CI_MYSQL_DATABASE: ${CI_MYSQL_DATABASE}"
              echo "CI_MYSQL_USER: ${CI_MYSQL_USER}"
              echo "CI_MYSQL_PASSWORD: ${CI_MYSQL_PASSWORD}"
              echo "CI_MYSQL_ROOT_PASSWORD: ${CI_MYSQL_ROOT_PASSWORD}"
            fi

      - run:
          name: Configure MySQL
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              if ! sudo systemctl start mysql || \
                 ! sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '${CI_MYSQL_ROOT_PASSWORD}';" || \
                 ! sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "CREATE DATABASE IF NOT EXISTS ${CI_MYSQL_DATABASE};" || \
                 ! sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "CREATE USER IF NOT EXISTS '${CI_MYSQL_USER}'@'localhost' IDENTIFIED BY '${CI_MYSQL_PASSWORD}';" || \
                 ! sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "GRANT ALL PRIVILEGES ON ${CI_MYSQL_DATABASE}.* TO '${CI_MYSQL_USER}'@'localhost';" || \
                 ! sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "FLUSH PRIVILEGES;"; then
                echo "Failed to configure MySQL"
                exit 1
              fi
            fi

      - run:
          name: Check MySQL Service
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              if ! sudo systemctl status mysql --no-pager || \
                 ! mysql --version || \
                 ! sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "SHOW DATABASES;" || \
                 ! sudo mysql -u ${CI_MYSQL_USER} -p"${CI_MYSQL_PASSWORD}" -e "SHOW DATABASES;"; then
                echo "MySQL service check failed"
                exit 1
              fi
            fi
          no_output_timeout: 1m

      - run:
          name: Restart MySQL Service if Needed
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              if ! sudo systemctl is-active --quiet mysql; then
                if ! sudo systemctl restart mysql; then
                  echo "Failed to restart MySQL service"
                  exit 1
                fi
              fi
            fi

      - restore_cache:
          keys:
            - composer-v1-{{ checksum "~/project/api/src/composer.lock" }}
            - composer-v1-

      - run:
          name: Install Composer Dependencies
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              cd ~/project/api/src
              if ! composer install --no-interaction --prefer-dist; then
                echo "Failed to install Composer dependencies"
                exit 1
              fi
            fi

      - save_cache:
          key: composer-v1-{{ checksum "~/project/api/src/composer.lock" }}
          paths:
            - ~/project/api/src/vendor

      - run:
          name: Create and Debug .env file
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              cd ~/project/api/src
              cp .env.example .env
              sed -i "s#DB_HOST=.*#DB_HOST=127.0.0.1#" .env
              sed -i "s#DB_DATABASE=.*#DB_DATABASE=${CI_MYSQL_DATABASE}#" .env
              sed -i "s#DB_USERNAME=.*#DB_USERNAME=${CI_MYSQL_USER}#" .env
              sed -i "s#DB_PASSWORD=.*#DB_PASSWORD=${CI_MYSQL_PASSWORD}#" .env
              sed -i "s#PUSHER_APP_ID=.*#PUSHER_APP_ID=${PUSHER_APP_ID}#" .env
              sed -i "s#PUSHER_APP_KEY=.*#PUSHER_APP_KEY=${PUSHER_APP_KEY}#" .env
              sed -i "s#PUSHER_APP_SECRET=.*#PUSHER_APP_SECRET=${PUSHER_APP_SECRET}#" .env
              sed -i "s#PUSHER_APP_CLUSTER=.*#PUSHER_APP_CLUSTER=${PUSHER_APP_CLUSTER}#" .env
              if ! php artisan key:generate || ! php artisan jwt:secret; then
                echo "Failed to generate Laravel keys"
                exit 1
              fi
              echo "Contents of .env file:"
              cat .env
            fi

      - run:
          name: Clear Config Cache
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              cd ~/project/api/src
              if ! php artisan config:clear || ! php artisan cache:clear; then
                echo "Failed to clear Laravel cache"
                exit 1
              fi
            fi

      - run:
          name: Debug Database Connection
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              cd ~/project/api/src
              echo "Environment variables:"
              echo "CI_MYSQL_DATABASE: ${CI_MYSQL_DATABASE}"
              echo "CI_MYSQL_USER: ${CI_MYSQL_USER}"
              echo "CI_MYSQL_PASSWORD: ${CI_MYSQL_PASSWORD}"
              echo "MySQL Version:"
              if ! mysql -h127.0.0.1 -u"${CI_MYSQL_USER}" -p"${CI_MYSQL_PASSWORD}" -e "SELECT VERSION();"; then
                echo "Failed to connect with user"
                exit 1
              fi
              echo "MySQL Users:"
              if ! sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "SELECT user, host FROM mysql.user;"; then
                echo "Failed to list MySQL users"
                exit 1
              fi
              echo "Database connection details:"
              if ! php artisan tinker --execute='print_r(config("database.connections.mysql"));'; then
                                echo "Failed to print database connection details"
                exit 1
              fi
              echo "Attempting connection:"
              if ! php artisan tinker --execute='try { DB::connection()->getPdo(); echo "Connection successful!"; } catch (\Exception $e) { echo "Connection failed: " . $e->getMessage(); exit(1); }'; then
                echo "Failed to connect to database"
                exit 1
              fi
            fi

      - run:
          name: Run database migrations and seed
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              cd ~/project/api/src
              if ! php artisan migrate --force --seed; then
                echo "Failed to run database migrations and seeding"
                exit 1
              fi
            fi

      - run:
          name: Run Laravel tests
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              cd ~/project/api/src
              if ! php artisan test; then
                echo "Laravel tests failed"
                exit 1
              fi
            fi

      - node/install:
          node-version: "18.17.0"

      - restore_cache:
          keys:
            - node-v1-{{ checksum "~/project/front/package-lock.json" }}
            - node-v1-

      - run:
          name: Check if package-lock.json exists
          command: |
            ls -la ~/project/front

      - run:
          name: Install Node.js dependencies
          working_directory: ~/project/front
          command: |
            if [ "$SKIP_FRONTEND_TESTS" = "false" ]; then
              if ! npm install; then
                echo "Failed to install Node.js dependencies"
                exit 1
              fi
            fi

      - save_cache:
          key: node-v1-{{ checksum "~/project/front/package-lock.json" }}
          paths:
            - ~/project/front/node_modules

      - run:
          name: Run frontend tests
          working_directory: ~/project/front
          command: |
            if [ "$SKIP_FRONTEND_TESTS" = "false" ]; then
              if ! npm test; then
                echo "Frontend tests failed"
                exit 1
              fi
            fi

      - aws-cli/setup

      - run:
          name: Configure AWS CLI
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region ap-northeast-1

      - run:
          name: Print AWS Credentials
          command: |
            echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}"
            echo "AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}"
            aws configure list

      - run:
          name: Test AWS CLI Credentials
          command: |
            if ! aws sts get-caller-identity; then
              echo "Failed to verify AWS credentials"
              exit 1
            fi

      - run:
          name: Check AWS CLI Version
          command: |
            aws --version

      # DockerイメージのビルドとAWS ECRへのプッシュ
      - run:
          name: Login to ECR
          command: |
            aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 699475951464.dkr.ecr.ap-northeast-1.amazonaws.com

      - run:
          name: Build Laravel Docker Image for Production
          working_directory: ~/project/api
          command: |
            docker build -t laravel-app:latest -f infra/php/Dockerfile.prod .

      - run:
          name: Build Next.js Docker Image
          working_directory: ~/project
          command: |
            docker build -t nextjs-app:latest -f front/Dockerfile .

      - run:
          name: Build Nginx Docker Image
          working_directory: ~/project/api
          command: |
            docker build -t nginx:latest -f infra/nginx/Dockerfile .

      - run:
          name: Push Laravel Docker Image to ECR
          command: |
            docker tag laravel-app:latest 699475951464.dkr.ecr.ap-northeast-1.amazonaws.com/laravel-app:latest
            docker push 699475951464.dkr.ecr.ap-northeast-1.amazonaws.com/laravel-app:latest

      - run:
          name: Push Next.js Docker Image to ECR
          command: |
            docker tag nextjs-app:latest 699475951464.dkr.ecr.ap-northeast-1.amazonaws.com/nextjs-app:latest
            docker push 699475951464.dkr.ecr.ap-northeast-1.amazonaws.com/nextjs-app:latest

      - run:
          name: Push Nginx Docker Image to ECR
          command: |
            docker tag nginx:latest 699475951464.dkr.ecr.ap-northeast-1.amazonaws.com/nginx:latest
            docker push 699475951464.dkr.ecr.ap-northeast-1.amazonaws.com/nginx:latest

      # ECSサービスのデプロイ
      - run:
          name: Deploy to AWS ECS
          command: |
            echo "Deploying to AWS ECS..."
            if ! aws ecs update-service --cluster ecs-cluster --service app-service --force-new-deployment --desired-count 1 --region ap-northeast-1; then
              echo "Failed to update ECS service"
              exit 1
            fi
            echo "Deployment triggered!"

      - run:
          name: Check Deployment Status
          command: |
            echo "Waiting for 5 minutes before checking deployment status..."
            sleep 300
            if ! aws ecs describe-services --cluster ecs-cluster --services app-service --region ap-northeast-1 | grep -q '"status": "ACTIVE"'; then
              echo "Deployment may have failed. Check ECS console for more details."
              exit 1
            fi
            echo "Deployment seems to be successful!"

      - slack/notify:
          event: fail
          channel: ${SLACK_CHANNEL_ID}
          template: basic_fail_1

      - slack/notify:
          event: pass
          channel: ${SLACK_CHANNEL_ID}
          template: success_tagged_deploy_1

workflows:
  version: 2
  build_and_test:
    jobs:
      - build:
          context: my-context
