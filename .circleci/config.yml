version: 2.1

orbs:
  node: circleci/node@5.0.2
  slack: circleci/slack@4.1.0
  aws-ecr: circleci/aws-ecr@6.15.3
  aws-ecs: circleci/aws-ecs@2.1.0
  aws-cli: circleci/aws-cli@2.0.3

jobs:
  build-and-test:
    machine:
      image: ubuntu-2204:current

    steps:
      - checkout:
          submodules: false

      - add_ssh_keys:
          fingerprints:
            - "${CI_SSH_FINGERPRINT_ROOT}"
            - "${CI_SSH_FINGERPRINT_API}"
            - "${CI_SSH_FINGERPRINT_FRONT}"

      - run:
          name: Configure SSH for GitHub
          command: |
            mkdir -p ~/.ssh
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            chmod 600 ~/.ssh/config

      - run:
          name: Checkout Submodules with SSH
          command: |
            git submodule sync
            git submodule update --init --recursive --depth 1

      - run:
          name: Check for API changes
          command: |
            if [ -z "$(git diff --quiet HEAD^ HEAD -- api || echo 'changed')" ]; then
              echo "No changes in API. Skipping API tests."
              echo "export SKIP_API_TESTS=true" >> $BASH_ENV
            else
              echo "Changes detected in API. Will run API tests."
              echo "export SKIP_API_TESTS=false" >> $BASH_ENV
            fi

      - run:
          name: Check for Frontend changes
          command: |
            if [ -z "$(git diff --quiet HEAD^ HEAD -- front || echo 'changed')" ]; then
              echo "No changes in Frontend. Skipping Frontend tests."
              echo "export SKIP_FRONTEND_TESTS=true" >> $BASH_ENV
            else
              echo "Changes detected in Frontend. Will run Frontend tests."
              echo "export SKIP_FRONTEND_TESTS=false" >> $BASH_ENV
            fi

      - run:
          name: Install Required Packages
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              sudo apt-get update
              sudo apt-get install -y mysql-server mysql-client php-cli php-mbstring php-xml php-curl php-dom php-mysql curl
            fi

      - run:
          name: Install Composer
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              curl -sS https://getcomposer.org/installer | php
              sudo mv composer.phar /usr/local/bin/composer
            fi

      - run:
          name: Debug Environment Variables
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              echo "CI_MYSQL_DATABASE: ${CI_MYSQL_DATABASE}"
              echo "CI_MYSQL_USER: ${CI_MYSQL_USER}"
              echo "CI_MYSQL_PASSWORD: ${CI_MYSQL_PASSWORD}"
              echo "CI_MYSQL_ROOT_PASSWORD: ${CI_MYSQL_ROOT_PASSWORD}"
            fi

      - run:
          name: Configure MySQL
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              sudo systemctl start mysql
              sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '${CI_MYSQL_ROOT_PASSWORD}';"
              sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "CREATE DATABASE IF NOT EXISTS ${CI_MYSQL_DATABASE};"
              sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "CREATE USER IF NOT EXISTS '${CI_MYSQL_USER}'@'localhost' IDENTIFIED BY '${CI_MYSQL_PASSWORD}';"
              sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "GRANT ALL PRIVILEGES ON ${CI_MYSQL_DATABASE}.* TO '${CI_MYSQL_USER}'@'localhost';"
              sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "FLUSH PRIVILEGES;"
            fi

      - run:
          name: Check MySQL Service
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              sudo systemctl status mysql --no-pager
              mysql --version
              sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "SHOW DATABASES;"
              sudo mysql -u ${CI_MYSQL_USER} -p"${CI_MYSQL_PASSWORD}" -e "SHOW DATABASES;"
            fi
          no_output_timeout: 1m

      - run:
          name: Restart MySQL Service if Needed
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              if ! sudo systemctl is-active --quiet mysql; then
                sudo systemctl restart mysql
              fi
            fi

      - restore_cache:
          keys:
            - composer-v1-{{ checksum "~/project/api/src/composer.lock" }}
            - composer-v1-

      - run:
          name: Install Composer Dependencies
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              cd ~/project/api/src
              composer install --no-interaction --prefer-dist
            fi

      - save_cache:
          key: composer-v1-{{ checksum "~/project/api/src/composer.lock" }}
          paths:
            - ~/project/api/src/vendor

      - run:
          name: Create and Debug .env file
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              cd ~/project/api/src
              cp .env.example .env
              sed -i "s#DB_HOST=.*#DB_HOST=127.0.0.1#" .env
              sed -i "s#DB_DATABASE=.*#DB_DATABASE=${CI_MYSQL_DATABASE}#" .env
              sed -i "s#DB_USERNAME=.*#DB_USERNAME=${CI_MYSQL_USER}#" .env
              sed -i "s#DB_PASSWORD=.*#DB_PASSWORD=${CI_MYSQL_PASSWORD}#" .env
              sed -i "s#PUSHER_APP_ID=.*#PUSHER_APP_ID=null#" .env
              sed -i "s#PUSHER_APP_KEY=.*#PUSHER_APP_KEY=null#" .env
              sed -i "s#PUSHER_APP_SECRET=.*#PUSHER_APP_SECRET=null#" .env
              sed -i "s#PUSHER_APP_CLUSTER=.*#PUSHER_APP_CLUSTER=null#" .env
              sed -i "s#BROADCAST_DRIVER=.*#BROADCAST_DRIVER=log#" .env
              sed -i "s#LARAVEL_WEBSOCKETS_ENABLED=.*#LARAVEL_WEBSOCKETS_ENABLED=false#" .env
              php artisan key:generate
              php artisan jwt:secret
              echo "Contents of .env file:"
              cat .env
            fi

      - run:
          name: Clear Config Cache
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              cd ~/project/api/src
              php artisan config:clear
              php artisan cache:clear
            fi

      - run:
          name: Debug Database Connection
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              cd ~/project/api/src
              echo "Environment variables:"
              echo "CI_MYSQL_DATABASE: ${CI_MYSQL_DATABASE}"
              echo "CI_MYSQL_USER: ${CI_MYSQL_USER}"
              echo "CI_MYSQL_PASSWORD: ${CI_MYSQL_PASSWORD}"
              echo "MySQL Version:"
              mysql -h127.0.0.1 -u"${CI_MYSQL_USER}" -p"${CI_MYSQL_PASSWORD}" -e "SELECT VERSION();" || echo "Failed to connect with user"
              echo "MySQL Users:"
              sudo mysql -u root -p"${CI_MYSQL_ROOT_PASSWORD}" -e "SELECT user, host FROM mysql.user;"
              echo "Database connection details:"
              php artisan tinker --execute="print_r(config('database.connections.mysql'));"
              echo "Attempting connection:"
              php artisan tinker --execute="try { DB::connection()->getPdo(); echo 'Connection successful!'; } catch (\Exception \$e) { echo 'Connection failed: ' . \$e->getMessage(); }"
            fi

      - run:
          name: Run database migrations and seed
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              cd ~/project/api/src
              php artisan migrate --force --seed
            fi

      - run:
          name: Run Laravel tests
          command: |
            if [ "$SKIP_API_TESTS" = "false" ]; then
              cd ~/project/api/src
              php artisan test
            fi

      - node/install:
          node-version: "18.17.0"

      - restore_cache:
          keys:
            - node-v1-{{ checksum "~/project/front/package-lock.json" }}
            - node-v1-

      - run:
          name: Install Node.js dependencies
          working_directory: ~/project/front
          command: |
            if [ "$SKIP_FRONTEND_TESTS" = "false" ]; then
              npm install
            fi

      - save_cache:
          key: node-v1-{{ checksum "~/project/front/package-lock.json" }}
          paths:
            - ~/project/front/node_modules

      - run:
          name: Run frontend tests
          working_directory: ~/project/front
          command: |
            if [ "$SKIP_FRONTEND_TESTS" = "false" ]; then
              npm test
            fi

      - run:
          name: Set job status
          command: |
            echo 'export CCI_STATUS="${CIRCLE_JOB}"' >> $BASH_ENV
            source $BASH_ENV

      - slack/notify:
          event: fail
          channel: ${SLACK_CHANNEL_ID}
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "Job: ${CIRCLE_JOB}",
                      "emoji": true
                    },
                    {
                      "type": "plain_text",
                      "text": "Status: Fail",
                      "emoji": true
                    }
                  ]
                }
              ]
            }

      - slack/notify:
          event: pass
          channel: ${SLACK_CHANNEL_ID}
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "Job: ${CIRCLE_JOB}",
                      "emoji": true
                    },
                    {
                      "type": "plain_text",
                      "text": "Status: <<pipeline.status>>",
                      "emoji": true
                    }
                  ]
                }
              ]
            }

  # build-and-push-image:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - run:
  #         name: Checkout submodules
  #         command: |
  #           git submodule sync
  #           git submodule update --init --recursive

  #     - setup_remote_docker

  #     - aws-cli/setup

  #     - run:
  #         name: Configure AWS default region
  #         command: |
  #           if [ -z "$AWS_DEFAULT_REGION" ]; then
  #             echo "AWS_DEFAULT_REGION is not set. Exiting."
  #             exit 1
  #           fi
  #           aws configure set default.region $AWS_DEFAULT_REGION --profile default

  #     - run:
  #         name: Get RDS endpoint and prepare .env.production
  #         command: |
  #           DB_HOST=$(aws rds describe-db-instances --db-instance-identifier ofcrm-mysql --query "DBInstances[0].Endpoint.Address" --output text)

  #           cd ./api/src
  #           echo "APP_NAME=OFCRM" > .env.production
  #           echo "APP_ENV=production" >> .env.production
  #           echo "APP_KEY=${APP_KEY}" >> .env.production
  #           echo "APP_DEBUG=false" >> .env.production
  #           echo "APP_URL=https://api.tkb-tech.com" >> .env.production
  #           echo "LOG_LEVEL=debug" >> .env.production

  #           echo "DB_CONNECTION=mysql" >> .env.production
  #           echo "DB_HOST=${DB_HOST}" >> .env.production
  #           echo "DB_PORT=3306" >> .env.production
  #           echo "DB_DATABASE=flowercrm_production" >> .env.production
  #           echo "DB_USERNAME=${DB_USERNAME}" >> .env.production
  #           echo "DB_PASSWORD=${DB_PASSWORD}" >> .env.production

  #           echo "BROADCAST_DRIVER=log" >> .env.production
  #           echo "PUSHER_APP_ID=null" >> .env.production
  #           echo "PUSHER_APP_KEY=null" >> .env.production
  #           echo "PUSHER_APP_SECRET=null" >> .env.production
  #           echo "PUSHER_HOST=null" >> .env.production
  #           echo "PUSHER_PORT=null" >> .env.production
  #           echo "PUSHER_SCHEME=https" >> .env.production
  #           echo "PUSHER_APP_CLUSTER=null" >> .env.production
  #           echo "LARAVEL_WEBSOCKETS_ENABLED=false" >> .env.production

  #           echo "JWT_SECRET=${JWT_SECRET}" >> .env.production
  #           echo "JWT_ALGO=${JWT_ALGO}" >> .env.production

  #           echo "FRONTEND_URL=https://front.tkb-tech.com" >> .env.production

  #     - restore_cache:
  #         keys:
  #           - docker-{{ .Branch }}-{{ checksum "./api/infra/php/Dockerfile.prod" }}

  #     - run:
  #         name: Set ECR URL and Build Docker Image
  #         command: |
  #           echo "Setting ECR URL..."
  #           ECR_ENDPOINT=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
  #           echo "export ECR_ENDPOINT=$ECR_ENDPOINT" >> $BASH_ENV
  #           source $BASH_ENV
  #           echo "ECR Endpoint: $ECR_ENDPOINT"

  #           echo "Logging in to AWS ECR..."
  #           aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_ENDPOINT

  #           echo "Building Docker image..."
  #           docker build \
  #             --build-arg NGINX_CONF_PATH=./infra/nginx/nginx.prod.conf \
  #             --build-arg DEFAULT_CONF_PATH=./infra/nginx/default.prod.conf \
  #             --build-arg PHP_INI_PATH=./infra/php/php.prod.ini \
  #             --build-arg ENTRYPOINT_SCRIPT_PATH=./infra/php/docker-entrypoint.prod.sh \
#             -t $ECR_ENDPOINT/ofcrm-app:${CIRCLE_SHA1} \
#             -f ./api/infra/php/Dockerfile.prod \
#             ./api

#           if [ $? -ne 0 ]; then
#             echo "Docker build failed"
#             exit 1
#           fi

#           echo "Docker build successful. Listing images:"
#           docker images

#           echo "Pushing image to ECR..."
#           docker push $ECR_ENDPOINT/ofcrm-app:${CIRCLE_SHA1}

#           if [ $? -ne 0 ]; then
#             echo "Failed to push image to ECR"
#             exit 1
#           fi

#           echo "Image successfully pushed to ECR"

#           echo "Describing image in ECR..."
#           aws ecr describe-images --repository-name ofcrm-app --image-ids imageTag=${CIRCLE_SHA1}

#     - save_cache:
#         paths:
#           - /home/circleci/.docker
#         key: docker-{{ .Branch }}-{{ checksum "./api/infra/php/Dockerfile.prod" }}

#     - run:
#         name: Update ECS task definition
#         command: |
#           TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ofcrm-app --query taskDefinition)

#           NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq '{
#             family: .family,
#             taskRoleArn: .taskRoleArn,
#             executionRoleArn: .executionRoleArn,
#             networkMode: .networkMode,
#             containerDefinitions: [.containerDefinitions[0] | .image = "'$ECR_ENDPOINT'/ofcrm-app:'${CIRCLE_SHA1}'"],
#             volumes: .volumes,
#             placementConstraints: .placementConstraints,
#             requiresCompatibilities: .requiresCompatibilities,
#             cpu: .cpu,
#             memory: .memory
#           }')

#           NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION")

#           NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
#           echo "New task definition revision: $NEW_REVISION"

#     - run:
#         name: Set job status
#         command: |
#           echo 'export CCI_STATUS="${CIRCLE_JOB}"' >> $BASH_ENV
#           source $BASH_ENV

#     - slack/notify:
#         event: fail
#         channel: ${SLACK_CHANNEL_ID}
#         custom: |
#           {
#             "blocks": [
#               {
#                 "type": "section",
#                 "fields": [
#                   {
#                     "type": "plain_text",
#                     "text": "Job: ${CIRCLE_JOB}",
#                     "emoji": true
#                   },
#                   {
#                     "type": "plain_text",
#                     "text": "Status: Fail",
#                     "emoji": true
#                   }
#                 ]
#               }
#             ]
#           }

#     - slack/notify:
#         event: pass
#         channel: ${SLACK_CHANNEL_ID}
#         custom: |
#           {
#             "blocks": [
#               {
#                 "type": "section",
#                 "fields": [
#                   {
#                     "type": "plain_text",
#                     "text": "Job: ${CIRCLE_JOB}",
#                     "emoji": true
#                   },
#                   {
#                     "type": "plain_text",
#                     "text": "Status: Pass",
#                     "emoji": true
#                   }
#                 ]
#               }
#             ]
#           }

# deploy-to-ecs:
#   docker:
#     - image: cimg/base:stable
#   steps:
#     - aws-cli/setup
#     - run:
#         name: Deploy to ECS
#         command: |
#           TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ofcrm-app --query 'taskDefinition.taskDefinitionArn' --output text)
#           aws ecs update-service --cluster ofcrm-cluster --service ofcrm-service --task-definition $TASK_DEFINITION --force-new-deployment

#     - run:
#         name: Wait for service to be stable
#         command: |
#           aws ecs wait services-stable --cluster ofcrm-cluster --services ofcrm-service

#     - run:
#         name: Verify deployment
#         command: |
#           HEALTH_CHECK_URL="https://api.tkb-tech.com/health"
#           HEALTH_CHECK_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL)
#           if [ "$HEALTH_CHECK_RESPONSE" = "200" ]; then
#             echo "Deployment successful. Health check passed."
#           else
#             echo "Deployment may have failed. Health check returned status $HEALTH_CHECK_RESPONSE"
#             exit 1
#           fi

#     - run:
#         name: Set job status
#         command: |
#           echo 'export CCI_STATUS="${CIRCLE_JOB}"' >> $BASH_ENV
#           source $BASH_ENV

#     - slack/notify:
#         event: fail
#         channel: ${SLACK_CHANNEL_ID}
#         custom: |
#           {
#             "blocks": [
#               {
#                 "type": "section",
#                 "fields": [
#                   {
#                     "type": "plain_text",
#                     "text": "Job: ${CIRCLE_JOB}",
#                     "emoji": true
#                   },
#                   {
#                     "type": "plain_text",
#                     "text": "Status: Fail",
#                     "emoji": true
#                   }
#                 ]
#               }
#             ]
#           }

#     - slack/notify:
#         event: pass
#         channel: ${SLACK_CHANNEL_ID}
#         custom: |
#           {
#             "blocks": [
#               {
#                 "type": "section",
#                 "fields": [
#                   {
#                     "type": "plain_text",
#                     "text": "Job: ${CIRCLE_JOB}",
#                     "emoji": true
#                   },
#                   {
#                     "type": "plain_text",
#                     "text": "Status: Pass",
#                     "emoji": true
#                   }
#                 ]
#               }
#             ]
#           }

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-and-test:
          context: my-context
      # - build-and-push-image:
      #     context: my-production-context
      #     requires:
      #       - build-and-test
      #     filters:
      #       branches:
      #         only: main
      # - deploy-to-ecs:
      #     context: my-production-context
      #     requires:
      #       - build-and-push-image
      #     filters:
      #       branches:
      #         only: main
